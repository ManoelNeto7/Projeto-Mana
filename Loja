import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from datetime import datetime

# Configuração inicial do banco de dados
def configurar_banco():
    conexao = sqlite3.connect("sistema_vendas.db")
    cursor = conexao.cursor()

    # Tabelas necessárias
    cursor.execute("""CREATE TABLE IF NOT EXISTS usuarios (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT NOT NULL,
                        senha TEXT NOT NULL,
                        tipo TEXT NOT NULL)""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS produtos (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT NOT NULL,
                        fornecedor TEXT,
                        fabricante TEXT,
                        valor REAL NOT NULL)""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS clientes (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT NOT NULL,
                        cpf TEXT NOT NULL,
                        endereco TEXT NOT NULL,
                        cidade TEXT NOT NULL,
                        estado TEXT NOT NULL)""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS vendas (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        cliente_id INTEGER NOT NULL,
                        total REAL NOT NULL,
                        data TEXT NOT NULL,
                        FOREIGN KEY (cliente_id) REFERENCES clientes(id))""")
    
    cursor.execute("""CREATE TABLE IF NOT EXISTS itens_venda (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        venda_id INTEGER NOT NULL,
                        produto_id INTEGER NOT NULL,
                        quantidade INTEGER NOT NULL,
                        FOREIGN KEY (venda_id) REFERENCES vendas(id),
                        FOREIGN KEY (produto_id) REFERENCES produtos(id))""")

    # Inserir usuário administrador padrão
    cursor.execute("SELECT * FROM usuarios WHERE nome = 'admin'")
    if not cursor.fetchone():
        cursor.execute("INSERT INTO usuarios (nome, senha, tipo) VALUES (?, ?, ?)", 
                       ('admin', 'admin', 'administrador'))

    conexao.commit()
    conexao.close()

configurar_banco()

# Tela de Login
def tela_login():
    def autenticar():
        usuario = entry_usuario.get()
        senha = entry_senha.get()
        conexao = sqlite3.connect("sistema_vendas.db")
        cursor = conexao.cursor()
        cursor.execute("SELECT * FROM usuarios WHERE nome = ? AND senha = ?", (usuario, senha))
        resultado = cursor.fetchone()
        conexao.close()

        if resultado:
            login.destroy()
            abrir_painel(resultado[3])  # Tipo do usuário: "administrador" ou "comum"
        else:
            messagebox.showerror("Erro", "Usuário ou senha inválidos.")

    login = tk.Tk()
    login.title("Login - Sistema de Vendas")
    login.geometry("300x200")

    tk.Label(login, text="Usuário:").pack(pady=5)
    entry_usuario = tk.Entry(login)
    entry_usuario.pack(pady=5)

    tk.Label(login, text="Senha:").pack(pady=5)
    entry_senha = tk.Entry(login, show="*")
    entry_senha.pack(pady=5)

    tk.Button(login, text="Entrar", command=autenticar).pack(pady=10)
    tk.Button(login, text="Sair", command=login.destroy).pack()
    login.mainloop()

# Painel Principal
def abrir_painel(tipo_usuario):
    painel = tk.Tk()
    painel.title("Painel Principal")
    painel.geometry("400x400")

    tk.Label(painel, text=f"Bem-vindo, {tipo_usuario.title()}!", font=("Arial", 14)).pack(pady=10)

    if tipo_usuario == "administrador":
        tk.Button(painel, text="Gerenciar Vendas", command=tela_vendas).pack(pady=5)
        tk.Button(painel, text="Cadastro de Produtos", command=tela_cadastro_produtos).pack(pady=5)
        tk.Button(painel, text="Cadastro de Clientes", command=tela_cadastro_clientes).pack(pady=5)
        tk.Button(painel, text="Relatório de Faturamento", command=tela_faturamento).pack(pady=5)
        tk.Button(painel, text="Visualizar Pedidos", command=tela_pedidos).pack(pady=5)
    else:
        tk.Button(painel, text="Gerenciar Vendas", command=tela_vendas).pack(pady=5)
        tk.Button(painel, text="Cadastro de Produtos", command=tela_cadastro_produtos).pack(pady=5)

    tk.Button(painel, text="Logout", command=painel.destroy).pack(pady=10)
    painel.mainloop()

# Cadastro de Produtos
def tela_cadastro_produtos():
    def cadastrar_produto():
        nome = entry_nome.get()
        fornecedor = entry_fornecedor.get()
        fabricante = entry_fabricante.get()
        valor = entry_valor.get()

        if not nome or not valor:
            messagebox.showerror("Erro", "Nome e Valor são obrigatórios.")
            return

        try:
            valor = float(valor)
        except ValueError:
            messagebox.showerror("Erro", "Valor deve ser numérico.")
            return

        conexao = sqlite3.connect("sistema_vendas.db")
        cursor = conexao.cursor()
        cursor.execute("INSERT INTO produtos (nome, fornecedor, fabricante, valor) VALUES (?, ?, ?, ?)", 
                       (nome, fornecedor, fabricante, valor))
        conexao.commit()
        conexao.close()

        messagebox.showinfo("Sucesso", "Produto cadastrado com sucesso!")
        tela.destroy()

    tela = tk.Toplevel()
    tela.title("Cadastro de Produtos")
    tela.geometry("400x300")

    tk.Label(tela, text="Nome do Produto:").pack(pady=5)
    entry_nome = tk.Entry(tela)
    entry_nome.pack(pady=5)

    tk.Label(tela, text="Fornecedor:").pack(pady=5)
    entry_fornecedor = tk.Entry(tela)
    entry_fornecedor.pack(pady=5)

    tk.Label(tela, text="Fabricante:").pack(pady=5)
    entry_fabricante = tk.Entry(tela)
    entry_fabricante.pack(pady=5)

    tk.Label(tela, text="Valor:").pack(pady=5)
    entry_valor = tk.Entry(tela)
    entry_valor.pack(pady=5)

    tk.Button(tela, text="Cadastrar", command=cadastrar_produto).pack(pady=10)
    tk.Button(tela, text="Cancelar", command=tela.destroy).pack()

# Gerenciamento de Vendas
def tela_vendas():
    def adicionar_ao_carrinho():
        produto_id = entry_produto_id.get()
        quantidade = entry_quantidade.get()

        if not produto_id or not quantidade:
            messagebox.showerror("Erro", "ID do produto e quantidade são obrigatórios.")
            return

        try:
            quantidade = int(quantidade)
        except ValueError:
            messagebox.showerror("Erro", "Quantidade deve ser um número inteiro.")
            return

        conexao = sqlite3.connect("sistema_vendas.db")
        cursor = conexao.cursor()
        cursor.execute("SELECT id, nome, valor FROM produtos WHERE id = ?", (produto_id,))
        produto = cursor.fetchone()
        conexao.close()

        if not produto:
            messagebox.showerror("Erro", "Produto não encontrado.")
            return

        item_total = produto[2] * quantidade
        carrinho.append((produto[0], produto[1], quantidade, produto[2], item_total))
        atualizar_lista_carrinho()

    def atualizar_lista_carrinho():
        lista_carrinho.delete(0, tk.END)
        total = 0
        for item in carrinho:
            lista_carrinho.insert(tk.END, f"{item[1]} - Quantidade: {item[2]} - Total: R${item[4]:.2f}")
            total += item[4]
        label_total["text"] = f"Total da Venda: R${total:.2f}"

    def finalizar_venda():
        if not carrinho:
            messagebox.showerror("Erro", "Carrinho está vazio.")
            return

        cliente_id = entry_cliente_id.get()
        if not cliente_id:
            messagebox.showerror("Erro", "ID do cliente é obrigatório.")
            return

        conexao = sqlite3.connect("sistema_vendas.db")
        cursor = conexao.cursor()
        cursor.execute("SELECT id FROM clientes WHERE id = ?", (cliente_id,))
        cliente = cursor.fetchone()

        if not cliente:
            messagebox.showerror("Erro", "Cliente não encontrado.")
            conexao.close()
            return

        total = sum(item[4] for item in carrinho)
        data_atual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO vendas (cliente_id, total, data) VALUES (?, ?, ?)", (cliente_id, total, data_atual))
        venda_id = cursor.lastrowid

        for item in carrinho:
            cursor.execute("INSERT INTO itens_venda (venda_id, produto_id, quantidade) VALUES (?, ?, ?)",
                           (venda_id, item[0], item[2]))

        conexao.commit()
        conexao.close()

        messagebox.showinfo("Sucesso", "Venda finalizada com sucesso!")
        carrinho.clear()
        atualizar_lista_carrinho()

    carrinho = []

    tela = tk.Toplevel()
    tela.title("Gerenciamento de Vendas")
    tela.geometry("500x400")

    tk.Label(tela, text="ID do Cliente:").pack(pady=5)
    entry_cliente_id = tk.Entry(tela)
    entry_cliente_id.pack(pady=5)

    tk.Label(tela, text="ID do Produto:").pack(pady=5)
    entry_produto_id = tk.Entry(tela)
    entry_produto_id.pack(pady=5)

    tk.Label(tela, text="Quantidade:").pack(pady=5)
    entry_quantidade = tk.Entry(tela)
    entry_quantidade.pack(pady=5)

    tk.Button(tela, text="Adicionar ao Carrinho", command=adicionar_ao_carrinho).pack(pady=10)

    lista_carrinho = tk.Listbox(tela, width=50, height=10)
    lista_carrinho.pack(pady=10)

    label_total = tk.Label(tela, text="Total da Venda: R$0.00", font=("Arial", 12))
    label_total.pack(pady=5)

    tk.Button(tela, text="Finalizar Venda", command=finalizar_venda).pack(pady=10)
    tk.Button(tela, text="Cancelar", command=tela.destroy).pack()
    
# Cadastro de Clientes
def tela_cadastro_clientes():
    def cadastrar_cliente():
        nome = entry_nome.get()
        cpf = entry_cpf.get()
        endereco = entry_endereco.get()
        cidade = entry_cidade.get()
        estado = entry_estado.get()

        if not nome or not cpf or not endereco or not cidade or not estado:
            messagebox.showerror("Erro", "Todos os campos são obrigatórios.")
            return

        conexao = sqlite3.connect("sistema_vendas.db")
        cursor = conexao.cursor()
        cursor.execute("INSERT INTO clientes (nome, cpf, endereco, cidade, estado) VALUES (?, ?, ?, ?, ?)", 
                       (nome, cpf, endereco, cidade, estado))
        conexao.commit()
        conexao.close()

        messagebox.showinfo("Sucesso", "Cliente cadastrado com sucesso!")
        tela.destroy()

    tela = tk.Toplevel()
    tela.title("Cadastro de Clientes")
    tela.geometry("400x300")

    tk.Label(tela, text="Nome do Cliente:").pack(pady=5)
    entry_nome = tk.Entry(tela)
    entry_nome.pack(pady=5)

    tk.Label(tela, text="CPF:").pack(pady=5)
    entry_cpf = tk.Entry(tela)
    entry_cpf.pack(pady=5)

    tk.Label(tela, text="Endereço:").pack(pady=5)
    entry_endereco = tk.Entry(tela)
    entry_endereco.pack(pady=5)

    tk.Label(tela, text="Cidade:").pack(pady=5)
    entry_cidade = tk.Entry(tela)
    entry_cidade.pack(pady=5)

    tk.Label(tela, text="Estado:").pack(pady=5)
    entry_estado = tk.Entry(tela)
    entry_estado.pack(pady=5)

    tk.Button(tela, text="Cadastrar", command=cadastrar_cliente).pack(pady=10)
    tk.Button(tela, text="Cancelar", command=tela.destroy).pack()

# Gerenciamento de Vendas
def tela_vendas():
    # Implementação futura
    pass

# Relatórios de Faturamento
def tela_faturamento():
    # Implementação futura
    pass

# Visualização de Pedidos
def tela_pedidos():
    # Implementação futura
    pass

# Inicialização
if __name__ == "__main__":
    tela_login()
RUN pip freeze > requirements.txt
